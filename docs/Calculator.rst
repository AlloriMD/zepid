.. image:: images/zepid_logo.png

-------------------------------------

Calculator
=====================================

*zEpid* includes some basic calculations which can be called directly from the ``calc`` branch. Functions within this
branch are generally used in other functions.

Measure of Association/Effect
'''''''''''''''''''''''''''''''''

Basic summary measures can be calculated directly when using *zEpid*. To obtain the following measures of
association/effect, you can  directly call the following calculations

Risk ratio

.. code:: python

   import zepid as ze
   rr = ze.calc.risk_ratio(12,25,193,253)

The returned object is a ``namedtuple``. The tuple object has the following attributes; ``point_estimate``, ``lower``,
``upper``, ``alpha``, and ``measure``. These attributes access the following; the point estimate, the lower confidence
limit, the upper confidence limit, the specified alpha level, and a string of the measure calculated (respectively).
These names apply to the remainder of the measure calculators described in this section.

Similarly the following estimates can be generated by:

Risk Difference

.. code:: python

   ze.calc.risk_difference(12,25,193,253)

Number needed to Treat

.. code:: python

   ze.calc.number_needed_to_treat(12,25,193,253)

Odds Ratio

.. code:: python

   ze.calc.odds_ratio(12,25,193,253)

Incidence Rate Difference

.. code:: python

   ze.calc.incidence_rate_difference(12,25,1093,2310)

Incidence Rate Ratio

.. code:: python

   ze.calc.incidence_rate_ratio(12,25,1093,2310)

Attributable Community Risk

.. code:: python

   ze.calc.attributable_community_risk(12,25,193,253)

Population Attributable Fraction

.. code:: python

   ze.calc.population_attributable_fraction(12,25,193,253)


Test Calculations
'''''''''''''''''''''''''''''''''

Aside from measures of association, *zEpid* also supports some calculations regarding sensitivity and specificity.
Using set sensitivity / specificity / prevalence, either the positive predictive value or the negative predictive value
can be generated as follows

.. code:: python

   ze.calc.ppv_conv(sensitivity=0.7,specificity=0.9,prevalence=0.1)

   ze.calc.npv_conv(sensitivity=0.7,specificity=0.9,prevalence=0.1)


Additionally, there is a function which allows comparisons of the relative costs of a screening program. The screening
program compares two extremes (everyone is considered as test positive, everyone is considered as test negative) and
compares them to the set sensitivity / specificity of the screening criteria

.. code:: python

   ze.calc.screening_cost_analyzer(cost_miss_case=2,cost_false_pos=1,prevalence=0.1,sensitivity=0.7,specificity=0.9)


Which returns the following results

.. code::

   ----------------------------------------------------------------------
   NOTE: When calculating costs, be sure to consult experts in health
   policy or related fields. Costs should encompass more than only 
   monetary costs, like relative costs (regret, disappointment, stigma, 
   disutility, etc.)
   ----------------------------------------------------------------------
   Treat everyone as Test-Negative
   Total relative cost:		 2000.0
   Per Capita relative cost:	 0.2
   ----------------------------------------------------------------------
   Treat everyone as Test-Positive
   Total relative cost:		 9000.0
   Per Capita relative cost:	 0.9
   ----------------------------------------------------------------------
   Treating by Screening Test
   Total relative cost:		 1500.0
   Per Capita relative cost:	 0.15
   ----------------------------------------------------------------------
   ----------------------------------------------------------------------

From these results, we would conclude that our test is a cost-effective strategy.


Other calculations
'''''''''''''''''''''''''''''''''

Some of the other available calculations include:

Counternull p-values

.. code:: python

   ze.calc.counternull_pvalue(estimate=0.1,lcl=-0.01,ucl=0.2)

Converting odds to probability

.. code:: python

   ze.calc.odds_to_probability(1.1)


Converting probability to odds

.. code:: python

   ze.calc.probability_to_odds(0.2)

If you have additional items you believe would make a good addition to the calculator functions, or *zEpid* in general,
please reach out to us on GitHub